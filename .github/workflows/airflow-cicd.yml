name: Airflow CI/CD
on:
  workflow_dispatch:  # Enable manual triggering
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: airflow
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install apache-airflow
          pip install apache-airflow-providers-apache-kafka
          pip install apache-airflow-providers-postgres
          pip install pandas faker
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: Initialize Airflow database
        env:
          AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
          AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@localhost/airflow
        run: |
          export AIRFLOW_HOME=$(pwd)
          airflow db init
          airflow users create \
            --username admin \
            --firstname admin \
            --lastname admin \
            --role Admin \
            --email admin@example.com \
            --password admin
      
      - name: Run tests
        env:
          AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@localhost/airflow
        run: |
          if [ -d "tests" ]; then
            pytest tests/
          else
            echo "No tests directory found, skipping tests"
          fi
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Setup SSH key
          echo "$SSH_PRIVATE_KEY" > akande_ec2_key.pem
          chmod 600 akande_ec2_key.pem
          
          # Check if dags directory exists locally
          if [ ! -d "dags" ]; then
            echo "Error: dags directory not found in repository"
            exit 1
          fi
          
          # Check if dags directory has files
          if [ -z "$(ls -A dags)" ]; then
            echo "Error: dags directory is empty"
            exit 1
          fi
          
          # Create backup of existing dags on EC2
          ssh -i akande_ec2_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST \
            "if [ -d ~/airflow/dags ]; then \
               timestamp=\$(date +%Y%m%d_%H%M%S); \
               mkdir -p ~/airflow/dags_backup_\$timestamp; \
               cp -r ~/airflow/dags/* ~/airflow/dags_backup_\$timestamp/ 2>/dev/null || true; \
             fi"
          
          # Ensure target directory exists
          ssh -i akande_ec2_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST \
            "mkdir -p ~/airflow/dags"
          
          # Copy DAGs to EC2
          scp -i akande_ec2_key.pem -o StrictHostKeyChecking=no \
            -r dags/* \
            $EC2_USERNAME@$EC2_HOST:~/airflow/dags/
          
          # Verify files were copied successfully
          ssh -i akande_ec2_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST \
            "if [ ! -d ~/airflow/dags ] || [ -z \"\$(ls -A ~/airflow/dags)\" ]; then \
               echo 'Error: DAGs were not copied successfully'; \
               exit 1; \
             fi"
          
          # Start or restart Airflow services
          ssh -i akande_ec2_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST \
            "cd ~/airflow && docker-compose up -d"
          
          echo "Deployment completed successfully"
      
      - name: Cleanup
        if: always()
        run: rm -f akande_ec2_key.pem
